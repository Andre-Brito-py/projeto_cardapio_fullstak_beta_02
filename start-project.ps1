# Food Delivery - Script de Inicializa√ß√£o Completo
# Este script verifica depend√™ncias, instala se necess√°rio e inicia todos os servi√ßos

Write-Host "========================================" -ForegroundColor Cyan
Write-Host "    FOOD DELIVERY - INICIALIZA√á√ÉO" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# Fun√ß√£o para verificar se um comando existe
function Test-Command($cmdname) {
    return [bool](Get-Command -Name $cmdname -ErrorAction SilentlyContinue)
}

# Fun√ß√£o para verificar se uma porta est√° em uso
function Test-Port($port) {
    $connection = Test-NetConnection -ComputerName localhost -Port $port -InformationLevel Quiet -WarningAction SilentlyContinue
    return $connection
}

# Verificar Node.js
Write-Host "[VERIFICA√á√ÉO] Verificando Node.js..." -ForegroundColor Yellow
if (-not (Test-Command "node")) {
    Write-Host "ERRO: Node.js n√£o encontrado. Instale o Node.js primeiro." -ForegroundColor Red
    Write-Host "Download: https://nodejs.org/" -ForegroundColor Yellow
    Read-Host "Pressione Enter para sair"
    exit 1
}
$nodeVersion = node --version
Write-Host "‚úÖ Node.js encontrado: $nodeVersion" -ForegroundColor Green

# Verificar npm
if (-not (Test-Command "npm")) {
    Write-Host "ERRO: npm n√£o encontrado." -ForegroundColor Red
    exit 1
}
$npmVersion = npm --version
Write-Host "‚úÖ npm encontrado: v$npmVersion" -ForegroundColor Green

# Verificar MongoDB
Write-Host "[VERIFICA√á√ÉO] Verificando MongoDB..." -ForegroundColor Yellow
$mongoProcess = Get-Process -Name "mongod" -ErrorAction SilentlyContinue
if (-not $mongoProcess) {
    Write-Host "‚ö†Ô∏è  MongoDB n√£o est√° rodando." -ForegroundColor Yellow
    Write-Host "   Certifique-se de iniciar o MongoDB antes de continuar." -ForegroundColor Yellow
    $continue = Read-Host "Deseja continuar mesmo assim? (s/n)"
    if ($continue -ne "s" -and $continue -ne "S") {
        exit 1
    }
} else {
    Write-Host "‚úÖ MongoDB est√° rodando" -ForegroundColor Green
}

# Verificar se as portas est√£o livres
Write-Host "[VERIFICA√á√ÉO] Verificando portas..." -ForegroundColor Yellow
$ports = @(4000, 5173, 5174)
$portsInUse = @()

foreach ($port in $ports) {
    if (Test-Port $port) {
        $portsInUse += $port
    }
}

if ($portsInUse.Count -gt 0) {
    Write-Host "‚ö†Ô∏è  Portas em uso: $($portsInUse -join ', ')" -ForegroundColor Yellow
    Write-Host "   Os servi√ßos podem usar portas alternativas." -ForegroundColor Yellow
}

# Fun√ß√£o para instalar depend√™ncias se necess√°rio
function Install-Dependencies($path, $name) {
    Write-Host "[DEPEND√äNCIAS] Verificando $name..." -ForegroundColor Yellow
    
    if (-not (Test-Path "$path\node_modules")) {
        Write-Host "üì¶ Instalando depend√™ncias do $name..." -ForegroundColor Cyan
        Set-Location $path
        npm install
        if ($LASTEXITCODE -ne 0) {
            Write-Host "ERRO: Falha ao instalar depend√™ncias do $name" -ForegroundColor Red
            return $false
        }
        Write-Host "‚úÖ Depend√™ncias do $name instaladas" -ForegroundColor Green
    } else {
        Write-Host "‚úÖ Depend√™ncias do $name j√° instaladas" -ForegroundColor Green
    }
    return $true
}

# Voltar ao diret√≥rio raiz
Set-Location $PSScriptRoot

# Instalar depend√™ncias
$success = $true
$success = $success -and (Install-Dependencies "backend" "Backend")
$success = $success -and (Install-Dependencies "frontend" "Frontend")
$success = $success -and (Install-Dependencies "admin" "Admin")

if (-not $success) {
    Write-Host "ERRO: Falha na instala√ß√£o de depend√™ncias" -ForegroundColor Red
    Read-Host "Pressione Enter para sair"
    exit 1
}

# Criar diret√≥rio de logs
if (-not (Test-Path "logs")) {
    New-Item -ItemType Directory -Path "logs" | Out-Null
}

Write-Host ""
Write-Host "[INICIALIZA√á√ÉO] Iniciando servi√ßos..." -ForegroundColor Cyan

# Iniciar Backend
Write-Host "üöÄ [1/3] Iniciando Backend (porta 4000)..." -ForegroundColor Green
Set-Location "$PSScriptRoot\backend"
Start-Process powershell -ArgumentList "-NoExit", "-Command", "npm start" -WindowStyle Normal
Start-Sleep -Seconds 3

# Iniciar Frontend
Write-Host "üöÄ [2/3] Iniciando Frontend (porta 5173)..." -ForegroundColor Green
Set-Location "$PSScriptRoot\frontend"
Start-Process powershell -ArgumentList "-NoExit", "-Command", "npm run dev" -WindowStyle Normal
Start-Sleep -Seconds 3

# Iniciar Admin
Write-Host "üöÄ [3/3] Iniciando Admin (porta 5174)..." -ForegroundColor Green
Set-Location "$PSScriptRoot\admin"
Start-Process powershell -ArgumentList "-NoExit", "-Command", "npm run dev" -WindowStyle Normal
Start-Sleep -Seconds 3

# Voltar ao diret√≥rio raiz
Set-Location $PSScriptRoot

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "    SERVI√áOS INICIADOS COM SUCESSO!" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìç URLs de acesso:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Frontend (Clientes): http://localhost:5173" -ForegroundColor White
Write-Host "   ‚Ä¢ Admin (Lojas):       http://localhost:5174" -ForegroundColor White
Write-Host "   ‚Ä¢ Backend (API):       http://localhost:4000" -ForegroundColor White
Write-Host ""
Write-Host "‚è≥ Aguardando servi√ßos carregarem..." -ForegroundColor Yellow
Start-Sleep -Seconds 10

Write-Host "üåê Abrindo URLs no navegador..." -ForegroundColor Green
Start-Process "http://localhost:5173"
Start-Process "http://localhost:5174"

Write-Host ""
Write-Host "‚úÖ Projeto iniciado com sucesso!" -ForegroundColor Green
Write-Host "üìã Verifique as janelas do PowerShell para logs dos servi√ßos." -ForegroundColor Yellow
Write-Host "üõë Para parar todos os servi√ßos, feche as janelas do PowerShell." -ForegroundColor Yellow
Write-Host ""
Read-Host "Pressione Enter para finalizar este script"