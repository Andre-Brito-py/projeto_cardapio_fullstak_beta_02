version: '3.8'

services:
  # Serviço principal da IA Liza
  liza-ai:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
    container_name: liza-delivery-ai
    restart: unless-stopped
    ports:
      - "8000:8000"  # API da IA
      - "9090:9090"  # Métricas
    environment:
      - ENVIRONMENT=production
      - OLLAMA_HOST=ollama
      - OLLAMA_PORT=11434
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://liza:liza123@postgres:5432/liza_delivery
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./logs:/app/logs
      - ./checkpoints:/app/checkpoints
      - ./data:/app/data
    depends_on:
      - ollama
      - redis
      - postgres
    networks:
      - liza-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Ollama para modelos de IA
  ollama:
    image: ollama/ollama:latest
    container_name: liza-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
    networks:
      - liza-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis para cache e sessões
  redis:
    image: redis:7-alpine
    container_name: liza-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-liza123}
    networks:
      - liza-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL para dados persistentes
  postgres:
    image: postgres:15-alpine
    container_name: liza-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=liza_delivery
      - POSTGRES_USER=liza
      - POSTGRES_PASSWORD=liza123
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - liza-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U liza -d liza_delivery"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: liza-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - liza-ai
    networks:
      - liza-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus para monitoramento
  prometheus:
    image: prom/prometheus:latest
    container_name: liza-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - liza-network

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: liza-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - liza-network

  # Worker para processamento assíncrono
  worker:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
    container_name: liza-worker
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - WORKER_MODE=true
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://liza:liza123@postgres:5432/liza_delivery
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - redis
      - postgres
    networks:
      - liza-network
    command: ["python", "worker.py"]

  # Telegram Bot
  telegram-bot:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
    container_name: liza-telegram-bot
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - BOT_MODE=true
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - API_URL=http://liza-ai:8000
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
    depends_on:
      - liza-ai
      - redis
    networks:
      - liza-network
    command: ["python", "telegram_bot.py"]

volumes:
  ollama_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  liza-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16