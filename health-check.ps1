# Food Delivery - Script de Verifica√ß√£o de Sa√∫de
# Este script verifica se todos os servi√ßos est√£o funcionando corretamente

Write-Host "========================================" -ForegroundColor Cyan
Write-Host "    FOOD DELIVERY - HEALTH CHECK" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# Fun√ß√£o para testar uma URL
function Test-Url($url, $name, $expectedStatus = 200) {
    try {
        Write-Host "üîç Testando $name..." -ForegroundColor Yellow -NoNewline
        $response = Invoke-WebRequest -Uri $url -Method GET -TimeoutSec 10 -UseBasicParsing
        if ($response.StatusCode -eq $expectedStatus) {
            Write-Host " ‚úÖ OK" -ForegroundColor Green
            return $true
        } else {
            Write-Host " ‚ùå FALHA (Status: $($response.StatusCode))" -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host " ‚ùå FALHA ($($_.Exception.Message))" -ForegroundColor Red
        return $false
    }
}

# Fun√ß√£o para testar API com JSON
function Test-ApiEndpoint($url, $name) {
    try {
        Write-Host "üîç Testando $name..." -ForegroundColor Yellow -NoNewline
        $response = Invoke-RestMethod -Uri $url -Method GET -TimeoutSec 10
        Write-Host " ‚úÖ OK" -ForegroundColor Green
        return $true
    } catch {
        Write-Host " ‚ùå FALHA ($($_.Exception.Message))" -ForegroundColor Red
        return $false
    }
}

# Fun√ß√£o para verificar se uma porta est√° em uso
function Test-Port($port, $name) {
    try {
        Write-Host "üîç Verificando porta $port ($name)..." -ForegroundColor Yellow -NoNewline
        $connection = Test-NetConnection -ComputerName localhost -Port $port -InformationLevel Quiet -WarningAction SilentlyContinue
        if ($connection) {
            Write-Host " ‚úÖ ATIVA" -ForegroundColor Green
            return $true
        } else {
            Write-Host " ‚ùå INATIVA" -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host " ‚ùå ERRO" -ForegroundColor Red
        return $false
    }
}

$allHealthy = $true

Write-Host "[VERIFICA√á√ÉO DE PORTAS]" -ForegroundColor Cyan
$backendPort = Test-Port 4000 "Backend"
$frontendPort = Test-Port 5173 "Frontend"
$adminPort = Test-Port 5174 "Admin"

Write-Host ""
Write-Host "[VERIFICA√á√ÉO DE SERVI√áOS]" -ForegroundColor Cyan

# Testar Backend
if ($backendPort) {
    $backendHealth = Test-Url "http://localhost:4000" "Backend API"
    $allHealthy = $allHealthy -and $backendHealth
} else {
    $allHealthy = $false
}

# Testar Frontend
if ($frontendPort) {
    $frontendHealth = Test-Url "http://localhost:5173" "Frontend"
    $allHealthy = $allHealthy -and $frontendHealth
} else {
    $allHealthy = $false
}

# Testar Admin
if ($adminPort) {
    $adminHealth = Test-Url "http://localhost:5174" "Admin Panel"
    $allHealthy = $allHealthy -and $adminHealth
} else {
    $allHealthy = $false
}

Write-Host ""
Write-Host "[VERIFICA√á√ÉO DE APIs ESPEC√çFICAS]" -ForegroundColor Cyan

if ($backendPort) {
    # Testar endpoints espec√≠ficos
    Test-ApiEndpoint "http://localhost:4000/api/food/list" "API - Lista de Alimentos"
    Test-ApiEndpoint "http://localhost:4000/api/category/list" "API - Lista de Categorias"
    
    # Testar endpoint p√∫blico de loja (se houver lojas cadastradas)
    Write-Host "üîç Testando API p√∫blica de loja..." -ForegroundColor Yellow -NoNewline
    try {
        # Primeiro, tentar obter uma loja de teste
        $testResponse = Invoke-RestMethod -Uri "http://localhost:4000/api/store/public/loja-teste" -Method GET -TimeoutSec 5
        if ($testResponse.success) {
            Write-Host " ‚úÖ OK (Loja teste encontrada)" -ForegroundColor Green
        } else {
            Write-Host " ‚ö†Ô∏è  Nenhuma loja teste encontrada" -ForegroundColor Yellow
        }
    } catch {
        Write-Host " ‚ö†Ô∏è  Endpoint dispon√≠vel mas sem dados de teste" -ForegroundColor Yellow
    }
}

Write-Host ""
Write-Host "[VERIFICA√á√ÉO DE DEPEND√äNCIAS]" -ForegroundColor Cyan

# Verificar MongoDB
Write-Host "üîç Verificando MongoDB..." -ForegroundColor Yellow -NoNewline
$mongoProcess = Get-Process -Name "mongod" -ErrorAction SilentlyContinue
if ($mongoProcess) {
    Write-Host " ‚úÖ RODANDO" -ForegroundColor Green
} else {
    Write-Host " ‚ùå N√ÉO ENCONTRADO" -ForegroundColor Red
    $allHealthy = $false
}

# Verificar Node.js
Write-Host "üîç Verificando Node.js..." -ForegroundColor Yellow -NoNewline
try {
    $nodeVersion = node --version
    Write-Host " ‚úÖ $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host " ‚ùå N√ÉO ENCONTRADO" -ForegroundColor Red
    $allHealthy = $false
}

# Verificar npm
Write-Host "üîç Verificando npm..." -ForegroundColor Yellow -NoNewline
try {
    $npmVersion = npm --version
    Write-Host " ‚úÖ v$npmVersion" -ForegroundColor Green
} catch {
    Write-Host " ‚ùå N√ÉO ENCONTRADO" -ForegroundColor Red
    $allHealthy = $false
}

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan

if ($allHealthy) {
    Write-Host "    ‚úÖ SISTEMA SAUD√ÅVEL" -ForegroundColor Green
    Write-Host "========================================" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "üéâ Todos os servi√ßos est√£o funcionando corretamente!" -ForegroundColor Green
    Write-Host ""
    Write-Host "üìç URLs dispon√≠veis:" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ Frontend: http://localhost:5173" -ForegroundColor White
    Write-Host "   ‚Ä¢ Admin:    http://localhost:5174" -ForegroundColor White
    Write-Host "   ‚Ä¢ API:      http://localhost:4000" -ForegroundColor White
} else {
    Write-Host "    ‚ùå PROBLEMAS DETECTADOS" -ForegroundColor Red
    Write-Host "========================================" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "‚ö†Ô∏è  Alguns servi√ßos n√£o est√£o funcionando corretamente." -ForegroundColor Yellow
    Write-Host "üí° Sugest√µes:" -ForegroundColor Yellow
    Write-Host "   1. Execute o script start-project.ps1 para iniciar todos os servi√ßos" -ForegroundColor White
    Write-Host "   2. Verifique se o MongoDB est√° rodando" -ForegroundColor White
    Write-Host "   3. Verifique os logs dos servi√ßos para erros espec√≠ficos" -ForegroundColor White
}

Write-Host ""
Read-Host "Pressione Enter para finalizar"