const axios = require('axios');

// Teste para reproduzir o problema do carrinho
async function testCartSyncIssue() {
    console.log('üß™ Testando problema de sincroniza√ß√£o do carrinho\n');
    
    const API_BASE = 'http://localhost:4001';
    
    try {
        // 1. Buscar produtos dispon√≠veis
        console.log('1Ô∏è‚É£ Buscando produtos dispon√≠veis...');
        const foodResponse = await axios.get(`${API_BASE}/api/food/list`);
        
        if (!foodResponse.data.success || foodResponse.data.data.length === 0) {
            console.log('‚ùå Nenhum produto encontrado');
            return;
        }
        
        const products = foodResponse.data.data;
        const testProduct = products[0];
        console.log(`‚úÖ Produto selecionado: ${testProduct.name} (ID: ${testProduct._id})`);
        
        // 2. Simular adi√ß√£o ao carrinho local (sem autentica√ß√£o)
        console.log('\n2Ô∏è‚É£ Simulando adi√ß√£o ao carrinho local...');
        
        const cartKey = testProduct._id;
        const cartItem = {
            quantity: 2,
            itemId: testProduct._id,
            extras: [],
            observations: 'Teste de sincroniza√ß√£o',
            includeDisposables: false
        };
        
        const cartData = {
            [cartKey]: cartItem
        };
        
        console.log('üì¶ Dados do carrinho simulado:');
        console.log(JSON.stringify(cartData, null, 2));
        
        // 3. Simular o que acontece no localStorage
        console.log('\n3Ô∏è‚É£ Simulando localStorage...');
        console.log('localStorage.setItem("cartItems", JSON.stringify(cartData))');
        console.log('Conte√∫do salvo:', JSON.stringify(cartData));
        
        // 4. Simular recupera√ß√£o do localStorage
        console.log('\n4Ô∏è‚É£ Simulando recupera√ß√£o do localStorage...');
        const retrievedCart = JSON.parse(JSON.stringify(cartData)); // Simula JSON.parse(localStorage.getItem("cartItems"))
        console.log('Dados recuperados:', JSON.stringify(retrievedCart));
        console.log(`Itens no carrinho: ${Object.keys(retrievedCart).length}`);
        
        // 5. Verificar se h√° diferen√ßas
        console.log('\n5Ô∏è‚É£ Verificando consist√™ncia...');
        const originalKeys = Object.keys(cartData);
        const retrievedKeys = Object.keys(retrievedCart);
        
        if (originalKeys.length === retrievedKeys.length) {
            console.log('‚úÖ N√∫mero de itens consistente');
        } else {
            console.log('‚ùå Inconsist√™ncia no n√∫mero de itens');
            console.log(`Original: ${originalKeys.length}, Recuperado: ${retrievedKeys.length}`);
        }
        
        // 6. Simular problema de timing
        console.log('\n6Ô∏è‚É£ Simulando problema de timing (React state vs localStorage)...');
        
        // Cen√°rio: Estado React vazio, localStorage com dados
        const reactState = {}; // Estado inicial vazio
        const localStorageData = cartData; // localStorage com dados
        
        console.log('Estado React atual:', Object.keys(reactState).length, 'itens');
        console.log('localStorage atual:', Object.keys(localStorageData).length, 'itens');
        
        if (Object.keys(reactState).length === 0 && Object.keys(localStorageData).length > 0) {
            console.log('üö® PROBLEMA IDENTIFICADO: Estado React vazio mas localStorage tem dados!');
            console.log('üí° Solu√ß√£o: For√ßar sincroniza√ß√£o do localStorage para o estado React');
        }
        
        // 7. Testar APIs do carrinho
        console.log('\n7Ô∏è‚É£ Testando APIs do carrinho...');
        
        try {
            // Teste sem autentica√ß√£o (deve retornar sucesso mas n√£o salvar no backend)
            const addResponse = await axios.post(`${API_BASE}/api/cart/add`, {
                itemId: testProduct._id,
                extras: [],
                observations: 'Teste sem auth',
                includeDisposables: false
            });
            
            console.log('Resposta add sem auth:', addResponse.data);
            
            // Teste get sem autentica√ß√£o
            const getResponse = await axios.post(`${API_BASE}/api/cart/get`, {});
            console.log('Resposta get sem auth:', getResponse.data);
            
        } catch (error) {
            console.log('Erro nas APIs:', error.response?.data || error.message);
        }
        
        console.log('\nüìã RESUMO DO PROBLEMA:');
        console.log('- Usu√°rio adiciona itens ao carrinho (salva no localStorage)');
        console.log('- Usu√°rio navega para /cart ou clica no √≠cone da sacola');
        console.log('- Estado React pode estar vazio enquanto localStorage tem dados');
        console.log('- Resultado: Carrinho aparece vazio na interface');
        console.log('\nüí° SOLU√á√ïES IMPLEMENTADAS:');
        console.log('- useEffect no Cart.jsx para for√ßar carregamento do localStorage');
        console.log('- useEffect no Navbar.jsx para sincronizar √≠cone do carrinho');
        console.log('- Logs de debug no StoreContext.jsx');
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error.message);
    }
}

// Executar teste
testCartSyncIssue();