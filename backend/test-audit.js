import axios from 'axios';

const BASE_URL = 'http://localhost:4001';

// Fun√ß√£o para fazer login e obter token
async function login() {
    try {
        console.log('üîê Fazendo login como super admin...');
        
        const response = await axios.post(`${BASE_URL}/api/system/super-admin/login`, {
            email: 'superadmin@fooddelivery.com',
            password: 'superadmin123'
        });
        
        if (response.data.success) {
            console.log('‚úÖ Login realizado com sucesso!');
            console.log('üîë Token obtido:', response.data.token.substring(0, 50) + '...');
            return response.data.token;
        } else {
            console.log('‚ùå Falha no login:', response.data.message);
            return null;
        }
    } catch (error) {
        console.log('‚ùå Erro no login:', error.response?.data?.message || error.message);
        return null;
    }
}

// Fun√ß√£o para testar se o sistema b√°sico est√° funcionando
async function testBasicSystem(token) {
    try {
        console.log('\nüîß Testando sistema b√°sico...');
        
        const response = await axios.get(`${BASE_URL}/api/system/stats`, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('‚úÖ Sistema b√°sico funcionando:');
        console.log('Status:', response.status);
        console.log('Dados:', JSON.stringify(response.data, null, 2));
        return true;
    } catch (error) {
        console.log('‚ùå Erro no sistema b√°sico:');
        console.log('Status:', error.response?.status);
        console.log('Mensagem:', error.response?.data?.message || error.message);
        console.log('Headers de resposta:', error.response?.headers);
        return false;
    }
}

// Fun√ß√£o para adicionar logs de debug no middleware
async function addDebugToMiddleware() {
    try {
        console.log('üîß Adicionando logs de debug ao middleware...');
        
        // Criar uma vers√£o tempor√°ria do middleware com debug
        const debugMiddleware = `
// Debug tempor√°rio para auditoria
export const debugAuditMiddleware = (req, res, next) => {
    console.log('üîç DEBUG AUDIT:', {
        method: req.method,
        originalUrl: req.originalUrl,
        path: req.path,
        route: req.route?.path,
        user: req.user ? { id: req.user._id, role: req.user.role } : null,
        storeContext: req.storeContext
    });
    next();
};
`;
        
        // Adicionar ao final do arquivo auditLogger.js
        const fs = await import('fs');
        fs.appendFileSync('./middleware/auditLogger.js', debugMiddleware);
        
        console.log('‚úÖ Debug adicionado ao middleware');
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao adicionar debug:', error.message);
        return false;
    }
}
async function checkAuditLogsInDatabase() {
    try {
        console.log('üîç Verificando logs de auditoria no banco de dados...');
        
        // Conectar ao MongoDB diretamente
        const mongoose = await import('mongoose');
        
        if (mongoose.default.connection.readyState !== 1) {
            await mongoose.default.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/fooddelivery');
        }
        
        // Importar o modelo AuditLog
        const AuditLog = (await import('./models/auditLogModel.js')).default;
        
        // Contar total de logs
        const totalLogs = await AuditLog.countDocuments();
        console.log(`üìä Total de logs de auditoria no banco: ${totalLogs}`);
        
        // Buscar os √∫ltimos 5 logs
        const recentLogs = await AuditLog.find()
            .sort({ createdAt: -1 })
            .limit(5)
            .select('action category storeId userId createdAt');
        
        console.log('üìã √öltimos logs de auditoria:');
        recentLogs.forEach((log, index) => {
            console.log(`  ${index + 1}. ${log.action} (${log.category}) - Store: ${log.storeId} - User: ${log.userId} - ${log.createdAt}`);
        });
        
        return totalLogs > 0;
    } catch (error) {
        console.error('‚ùå Erro ao verificar logs no banco:', error.message);
        return false;
    }
}
async function testAuditStats(token) {
    try {
        console.log('\nüìä Testando estat√≠sticas de auditoria...');
        
        const response = await axios.get(`${BASE_URL}/api/system/audit/stats`, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('‚úÖ Estat√≠sticas obtidas com sucesso:');
        console.log(JSON.stringify(response.data, null, 2));
        return true;
    } catch (error) {
        console.log('‚ùå Erro ao obter estat√≠sticas:', error.response?.data?.message || error.message);
        return false;
    }
}

// Fun√ß√£o para testar logs de auditoria de usu√°rio
async function testUserAuditLogs(token, userId = '68d2a0df957bd0cd44b38db3') {
    try {
        console.log('\nüë§ Testando logs de auditoria de usu√°rio...');
        
        const response = await axios.get(`${BASE_URL}/api/system/users/${userId}/audit`, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('‚úÖ Logs de usu√°rio obtidos com sucesso:');
        console.log(JSON.stringify(response.data, null, 2));
        return true;
    } catch (error) {
        console.log('‚ùå Erro ao obter logs de usu√°rio:', error.response?.data?.message || error.message);
        return false;
    }
}

// Fun√ß√£o para simular uma a√ß√£o que gera log de auditoria
async function simulateAuditAction(token) {
    try {
        console.log('\nüé≠ Simulando a√ß√£o para gerar log de auditoria...');
        
        // Tentar acessar estat√≠sticas do sistema (isso deve gerar um log)
        const response = await axios.get(`${BASE_URL}/api/system/stats`, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('‚úÖ A√ß√£o simulada com sucesso (acessou estat√≠sticas do sistema)');
        return true;
    } catch (error) {
        console.log('‚ö†Ô∏è A√ß√£o simulada (mesmo com erro, pode ter gerado log):', error.response?.data?.message || error.message);
        return true; // Retorna true porque mesmo erros podem gerar logs
    }
}

// Fun√ß√£o principal de teste
async function runAuditTests() {
    console.log('üß™ INICIANDO TESTES DO SISTEMA DE AUDITORIA');
    console.log('===========================================\n');
    
    // 1. Fazer login
    const token = await login();
    if (!token) {
        console.log('‚ùå N√£o foi poss√≠vel obter token. Encerrando testes.');
        return;
    }
    
    // 2. Verificar logs existentes no banco
    const hasExistingLogs = await checkAuditLogsInDatabase();
    
    // 3. Testar sistema b√°sico primeiro
    const basicSystemSuccess = await testBasicSystem(token);
    if (!basicSystemSuccess) {
        console.log('‚ùå Sistema b√°sico n√£o est√° funcionando. Verifique a autentica√ß√£o.');
        return;
    }
    
    // 4. Simular uma a√ß√£o para gerar logs
    await simulateAuditAction(token);
    
    // 5. Verificar novamente os logs no banco ap√≥s a a√ß√£o
    await checkAuditLogsInDatabase();
    
    // 6. Testar estat√≠sticas de auditoria
    const statsSuccess = await testAuditStats(token);
    
    // 7. Testar logs de usu√°rio
    const userLogsSuccess = await testUserAuditLogs(token);
    
    // 8. Resumo dos testes
    console.log('\nüìã RESUMO DOS TESTES');
    console.log('===================');
    console.log(`Login: ‚úÖ Sucesso`);
    console.log(`Sistema B√°sico: ${basicSystemSuccess ? '‚úÖ Sucesso' : '‚ùå Falha'}`);
    console.log(`Logs Existentes: ${hasExistingLogs ? 'SIM' : 'N√ÉO'}`);
    console.log(`Estat√≠sticas de Auditoria: ${statsSuccess ? '‚úÖ Sucesso' : '‚ùå Falha'}`);
    console.log(`Logs de Usu√°rio: ${userLogsSuccess ? '‚úÖ Sucesso' : '‚ùå Falha'}`);
    
    if (basicSystemSuccess && statsSuccess && userLogsSuccess) {
        console.log('\nüéâ TODOS OS TESTES PASSARAM! Sistema de auditoria funcionando corretamente.');
    } else {
        console.log('\n‚ö†Ô∏è Alguns testes falharam. Verifique a implementa√ß√£o.');
    }
}

// Executar testes
runAuditTests().catch(console.error);