import mongoose from 'mongoose';
import userModel from './models/userModel.js';
import Store from './models/storeModel.js';

const updateStoreAdmin = async () => {
    try {
        console.log('üîå Conectando ao MongoDB...');
        await mongoose.connect('mongodb://localhost:27017/mern-food-delivery-app');
        console.log('‚úÖ Conectado ao MongoDB\n');

        // Buscar o usu√°rio store admin
        console.log('üîç Buscando usu√°rio store admin...');
        const storeAdmin = await userModel.findOne({ 
            email: 'admin@fooddelivery.com'
        });

        if (!storeAdmin) {
            console.log('‚ùå Usu√°rio store admin n√£o encontrado');
            return;
        }

        console.log('‚úÖ Usu√°rio encontrado:');
        console.log('   ID:', storeAdmin._id);
        console.log('   Nome:', storeAdmin.name);
        console.log('   Email:', storeAdmin.email);
        console.log('   Role:', storeAdmin.role);
        console.log('   Store ID atual:', storeAdmin.storeId);

        // Buscar a loja criada
        console.log('\nüè™ Buscando loja...');
        const store = await Store.findOne({ name: 'Loja Demo' });
        
        if (!store) {
            console.log('‚ùå Loja n√£o encontrada');
            return;
        }

        console.log('‚úÖ Loja encontrada:');
        console.log('   ID:', store._id);
        console.log('   Nome:', store.name);

        // Atualizar o storeId do usu√°rio
        console.log('\nüîÑ Atualizando storeId do usu√°rio...');
        storeAdmin.storeId = store._id;
        await storeAdmin.save();

        console.log('‚úÖ Store admin atualizado com sucesso!');
        console.log('   Novo Store ID:', storeAdmin.storeId);

    } catch (error) {
        console.error('‚ùå Erro:', error);
    } finally {
        console.log('\nüîå Fechando conex√£o...');
        await mongoose.connection.close();
    }
};

updateStoreAdmin();