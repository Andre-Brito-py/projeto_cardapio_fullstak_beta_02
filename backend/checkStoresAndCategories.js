import mongoose from 'mongoose';
import Store from './models/storeModel.js';
import Category from './models/categoryModel.js';
import User from './models/userModel.js';
import Table from './models/tableModel.js';
import Banner from './models/bannerModel.js';
import CashbackTransaction from './models/cashbackTransactionModel.js';
import Customer from './models/customerModel.js';

// Conectar ao MongoDB
const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/fooddelivery', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('üîå Conectado ao MongoDB');
    return conn;
  } catch (error) {
    console.error('‚ùå Erro ao conectar ao MongoDB:', error.message);
    process.exit(1);
  }
};

const checkStoresAndCategories = async () => {
  try {
    await connectDB();

    console.log('\n=== VERIFICA√á√ÉO DE LOJAS ===');
    const stores = await Store.find({});
    console.log(`üìä Total de lojas: ${stores.length}`);
    
    if (stores.length > 0) {
      stores.forEach((store, index) => {
        console.log(`\n--- Loja ${index + 1} ---`);
        console.log(`üè™ Nome: ${store.name}`);
        console.log(`üìß Email: ${store.email}`);
        console.log(`üì± Telefone: ${store.phone || 'N√£o informado'}`);
        console.log(`üìç Endere√ßo: ${store.address || 'N√£o informado'}`);
        console.log(`‚úÖ Ativo: ${store.isActive}`);
        console.log(`üë§ Admin ID: ${store.adminId}`);
        console.log(`üìÖ Criado em: ${store.createdAt}`);
      });
    } else {
      console.log('‚ö†Ô∏è  Nenhuma loja encontrada no banco de dados');
    }

    console.log('\n=== VERIFICA√á√ÉO DE CATEGORIAS ===');
    const categories = await Category.find({});
    console.log(`üìä Total de categorias: ${categories.length}`);
    
    if (categories.length > 0) {
      categories.forEach((category, index) => {
        console.log(`\n--- Categoria ${index + 1} ---`);
        console.log(`üìÇ Nome: ${category.name}`);
        console.log(`üìù Descri√ß√£o: ${category.description || 'N√£o informado'}`);
        console.log(`üè™ Loja ID: ${category.storeId}`);
        console.log(`‚úÖ Ativo: ${category.isActive}`);
        console.log(`üìÖ Criado em: ${category.createdAt}`);
      });
    } else {
      console.log('‚ö†Ô∏è  Nenhuma categoria encontrada no banco de dados');
    }

    console.log('\n=== VERIFICA√á√ÉO DE MESAS ===');
    const tables = await Table.find({});
    console.log(`üìä Total de mesas: ${tables.length}`);
    
    if (tables.length > 0) {
      tables.forEach((table, index) => {
        console.log(`\n--- Mesa ${index + 1} ---`);
        console.log(`ü™ë N√∫mero: ${table.number}`);
        console.log(`üë• Capacidade: ${table.capacity}`);
        console.log(`üè™ Loja ID: ${table.storeId}`);
        console.log(`‚úÖ Ativo: ${table.isActive}`);
        console.log(`üìÖ Criado em: ${table.createdAt}`);
      });
    } else {
      console.log('‚ö†Ô∏è  Nenhuma mesa encontrada no banco de dados');
    }

    console.log('\n=== VERIFICA√á√ÉO DE BANNERS ===');
    const banners = await Banner.find({});
    console.log(`üìä Total de banners: ${banners.length}`);
    
    if (banners.length > 0) {
      banners.forEach((banner, index) => {
        console.log(`\n--- Banner ${index + 1} ---`);
        console.log(`üñºÔ∏è  T√≠tulo: ${banner.title}`);
        console.log(`üìù Descri√ß√£o: ${banner.description || 'N√£o informado'}`);
        console.log(`üîó URL da Imagem: ${banner.imageUrl}`);
        console.log(`üè™ Loja ID: ${banner.storeId}`);
        console.log(`‚úÖ Ativo: ${banner.isActive}`);
        console.log(`üìÖ Criado em: ${banner.createdAt}`);
      });
    } else {
      console.log('‚ö†Ô∏è  Nenhum banner encontrado no banco de dados');
    }

    console.log('\n=== VERIFICA√á√ÉO DE TRANSA√á√ïES DE CASHBACK ===');
    const cashbackTransactions = await CashbackTransaction.find({});
    console.log(`üìä Total de transa√ß√µes de cashback: ${cashbackTransactions.length}`);
    
    if (cashbackTransactions.length > 0) {
      cashbackTransactions.forEach((transaction, index) => {
        console.log(`\n--- Transa√ß√£o ${index + 1} ---`);
        console.log(`üë§ Cliente ID: ${transaction.customerId}`);
        console.log(`üí∞ Valor: R$ ${transaction.amount}`);
        console.log(`üìù Tipo: ${transaction.type}`);
        console.log(`üìÑ Descri√ß√£o: ${transaction.description || 'N√£o informado'}`);
        console.log(`üìÖ Criado em: ${transaction.createdAt}`);
      });
    } else {
      console.log('‚ö†Ô∏è  Nenhuma transa√ß√£o de cashback encontrada no banco de dados');
    }

    console.log('\n=== VERIFICA√á√ÉO DE CLIENTES ===');
    const customers = await Customer.find({});
    console.log(`üìä Total de clientes: ${customers.length}`);
    
    if (customers.length > 0) {
      customers.forEach((customer, index) => {
        console.log(`\n--- Cliente ${index + 1} ---`);
        console.log(`üë§ Nome: ${customer.name}`);
        console.log(`üìß Email: ${customer.email}`);
        console.log(`üì± Telefone: ${customer.phone || 'N√£o informado'}`);
        console.log(`üí∞ Saldo de Cashback: R$ ${customer.cashbackBalance || 0}`);
        console.log(`‚úÖ Ativo: ${customer.isActive}`);
        console.log(`üìÖ Criado em: ${customer.createdAt}`);
      });
    } else {
      console.log('‚ö†Ô∏è  Nenhum cliente encontrado no banco de dados');
    }

    console.log('\n=== VERIFICA√á√ÉO DE RELACIONAMENTOS ===');
    
    // Verificar se existem lojas sem admin
    const storesWithoutAdmin = await Store.find({ adminId: { $exists: false } });
    if (storesWithoutAdmin.length > 0) {
      console.log(`‚ö†Ô∏è  ${storesWithoutAdmin.length} loja(s) sem admin definido`);
    }

    // Verificar se existem categorias sem loja
    const categoriesWithoutStore = await Category.find({ storeId: { $exists: false } });
    if (categoriesWithoutStore.length > 0) {
      console.log(`‚ö†Ô∏è  ${categoriesWithoutStore.length} categoria(s) sem loja definida`);
    }

    // Verificar se existem mesas sem loja
    const tablesWithoutStore = await Table.find({ storeId: { $exists: false } });
    if (tablesWithoutStore.length > 0) {
      console.log(`‚ö†Ô∏è  ${tablesWithoutStore.length} mesa(s) sem loja definida`);
    }

    // Verificar se existem banners sem loja
    const bannersWithoutStore = await Banner.find({ storeId: { $exists: false } });
    if (bannersWithoutStore.length > 0) {
      console.log(`‚ö†Ô∏è  ${bannersWithoutStore.length} banner(s) sem loja definida`);
    }

    console.log('\n‚úÖ Verifica√ß√£o completa!');

  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error);
  } finally {
    console.log('\nüîå Fechando conex√£o com MongoDB');
    await mongoose.connection.close();
  }
};

checkStoresAndCategories();