import mongoose from 'mongoose';
import bcrypt from 'bcrypt';
import userModel from './models/userModel.js';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Carregar vari√°veis de ambiente
dotenv.config({ path: join(__dirname, '..', '.env') });

async function checkPasswordHashes() {
    try {
        console.log('üîå Conectando ao MongoDB...');
        await mongoose.connect(process.env.MONGO_URI);
        console.log('‚úÖ Conectado ao MongoDB\n');

        // Buscar todos os usu√°rios
        const users = await userModel.find({}, 'name email password role');
        
        console.log('üîç VERIFICANDO HASHES DAS SENHAS');
        console.log('================================\n');
        
        for (const user of users) {
            console.log(`üë§ Usu√°rio: ${user.name} (${user.email})`);
            console.log(`üìß Email: ${user.email}`);
            console.log(`üîë Role: ${user.role}`);
            console.log(`üîí Hash da senha: ${user.password}`);
            
            // Testar senhas conhecidas
            const testPasswords = ['superadmin123', 'admin123', '123456', 'password'];
            
            console.log('\nüß™ Testando senhas conhecidas:');
            for (const testPassword of testPasswords) {
                try {
                    const isMatch = await bcrypt.compare(testPassword, user.password);
                    console.log(`   "${testPassword}": ${isMatch ? '‚úÖ MATCH' : '‚ùå NO MATCH'}`);
                } catch (error) {
                    console.log(`   "${testPassword}": ‚ùå ERRO - ${error.message}`);
                }
            }
            
            // Verificar se o hash parece v√°lido (bcrypt hashes come√ßam com $2b$)
            const isValidBcryptHash = user.password.startsWith('$2b$') || user.password.startsWith('$2a$');
            console.log(`üîç Hash v√°lido do bcrypt: ${isValidBcryptHash ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
            
            console.log('\n' + '='.repeat(50) + '\n');
        }
        
        // Testar cria√ß√£o de novo hash
        console.log('üß™ TESTANDO CRIA√á√ÉO DE NOVO HASH');
        console.log('=================================\n');
        
        const testPassword = 'superadmin123';
        const saltRounds = 10;
        const newHash = await bcrypt.hash(testPassword, saltRounds);
        
        console.log(`Senha original: ${testPassword}`);
        console.log(`Novo hash: ${newHash}`);
        
        const testMatch = await bcrypt.compare(testPassword, newHash);
        console.log(`Teste de compara√ß√£o: ${testMatch ? '‚úÖ FUNCIONOU' : '‚ùå FALHOU'}`);
        
    } catch (error) {
        console.error('‚ùå Erro:', error);
    } finally {
        await mongoose.connection.close();
        console.log('\nüîå Conex√£o com MongoDB fechada');
    }
}

checkPasswordHashes();